#!/usr/bin/python

import sys
import os
import argparse
from libstu import *

THIS = os.path.basename(sys.argv[0])
DEFAULT_INPUT = THIS + "-input"

def update(grid, intersections, moves, id_num):
    coords = (0, 0)
    steps = 0
    for (d, l) in moves:
        if d == 'R':
            delta = (1, 0)
        elif d == 'L':
            delta = (-1, 0)
        elif d == 'U':
            delta = (0, 1)
        elif d == 'D':
            delta = (0, -1)
        for i in xrange(l):
            coords = (coords[0] + delta[0], coords[1] + delta[1])
            steps += 1
            if coords not in grid:
                grid[coords] = { id_num: steps }
            elif id_num not in grid[coords]:
                grid[coords][id_num] = steps
                if intersections is not None:
                    mh_dist = manhattan_dist(coords, (0, 0))
                    sig_dist = sum([ grid[coords][i] for i in grid[coords] ])
                    intersections[coords] = (mh_dist, sig_dist)


def main():
    arg_parser = argparse.ArgumentParser(prog=THIS)
    arg_parser.add_argument("-f", "--file", default=DEFAULT_INPUT,
                            help="specify the input file (default: %(default)s)", metavar="file")
    args = arg_parser.parse_args()

    # Open input file

    input_path = os.path.abspath(args.file)
    if not os.path.exists(input_path):
        print("%s: Error: File '%s' not found" % (THIS, args.file))
        return 1

    input = open(input_path, "r")
    if input is None:
        print("%s: Error: Couldn't open file '%s'" % (THIS, input_path))
        return 1

    # Main loop
    wire1_moves = [ (move[0], int(move[1:])) for move in input.readline().rstrip().split(',') ]
    wire2_moves = [ (move[0], int(move[1:])) for move in input.readline().rstrip().split(',') ]

    grid = {}
    intersections = {}
    update(grid, intersections, wire1_moves, 1)
    update(grid, intersections, wire2_moves, 2)
    #print min(intersections.items())
    print min(intersections.items(), key=(lambda k: k[1][0]))
    print min(intersections.items(), key=(lambda k: k[1][1]))

    return 0


if __name__ == "__main__":
    sys.exit(main())

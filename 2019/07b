#!/usr/bin/python

import sys
import os
import argparse
from libstu import *
from computer import *
import itertools

THIS = os.path.basename(sys.argv[0])
DEFAULT_INPUT = THIS + "-input"

class amplifier:
    def __init__(self, program):
        self.computer = computer(program)
        self.signal = 0

    def __iter__(self):
        return self

    def __next__(self):
        return self.signal

def main():
    arg_parser = argparse.ArgumentParser(prog=THIS)
    arg_parser.add_argument("-f", "--file", default=DEFAULT_INPUT,
                            help="specify the input file (default: %(default)s)", metavar="file")
    args = arg_parser.parse_args()

    # Open input file

    input_path = os.path.abspath(args.file)
    if not os.path.exists(input_path):
        print("%s: Error: File '%s' not found" % (THIS, args.file))
        return 1

    input = open(input_path, "r")
    if input is None:
        print("%s: Error: Couldn't open file '%s'" % (THIS, input_path))
        return 1

    # Main loop
    program = [ int(x) for x in input.readline().rstrip().split(',') ]
    amps = ( computer(program), computer(program), computer(program),
             computer(program), computer(program) )

    max_signal = [ 0, [] ]
    for phase_perm in itertools.permutations([5,6,7,8,9]):
        print("-= perm %s" % (phase_perm,))
        # signal must be mutable so it can be changed by the receive function
        signal = [ 0 ]
        # First pass, they all get the phase numbers
        def phase_input_generator():
            for phase in phase_perm:
                yield phase
                yield signal[0]
            while True:
                yield signal[0]
        gen = phase_input_generator()
        def provide_input():
            return next(gen)
        def signal_output_coroutine(val):
            yield val
        def receive_output(val):
            signal[0] = val
        for i in range(0, 5):
            amp[i].poke_input = provide_input
            amp[i].peek_output = receive_output
            print("-= signal %d" % signal[0])
            amp[i].reset()
            amp[i].run()
        # Rest of the passes, continue until halted
        i = 0
        while amp[4].state != halted:
            amp[i].run()



        if signal[0] > max_signal[0]:
            max_signal[0] = signal[0]
            max_signal[1] = phase_perm
        print("-= signal %d  max %d perm %s" % (signal[0], max_signal[0], max_signal[1]))

    return 0


if __name__ == "__main__":
    sys.exit(main())

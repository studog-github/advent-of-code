#!/usr/bin/python3

import sys
import os
import argparse
from libstu import *
from pprint import pprint
from copy import deepcopy
import itertools
import math

THIS = os.path.basename(sys.argv[0])
DEFAULT_INPUT = THIS + "-input"
DEFAULT_STEPS = 100

def main():
    arg_parser = argparse.ArgumentParser(prog=THIS)
    arg_parser.add_argument("-f", "--file", default=DEFAULT_INPUT,
                            help="specify the input file (default: %(default)s)", metavar="file")
    arg_parser.add_argument("-s", "--steps", default=DEFAULT_STEPS, type=int,
                            help="how many steps to run (default: %(default)s)", metavar="steps")
    args = arg_parser.parse_args()

    # Open input file

    input_path = os.path.abspath(args.file)
    if not os.path.exists(input_path):
        print("%s: Error: File '%s' not found" % (THIS, args.file))
        return 1

    input = open(input_path, "r")
    if input is None:
        print("%s: Error: Couldn't open file '%s'" % (THIS, input_path))
        return 1

    def display(lights):
        for row in lights:
            print(''.join(row))

    steps = args.steps

    ON = '#'
    OFF = '.'

    # Main loop
    orig_lights = []
    for line in input:
        orig_lights += [list(line.strip())]
    #display(orig_lights)
    #print(orig_lights)

    maxx = len(orig_lights[0])
    maxy = len(orig_lights)

    # Precalculate the neighbours
    neighbours = {}
    for y, row in enumerate(orig_lights):
        for x, col in enumerate(row):
            neighbourset = []
            if y - 1 >= 0:
                if x - 1 >= 0:
                    neighbourset += [(x-1, y-1)]
                neighbourset += [(x, y-1)]
                if x + 1 < maxx:
                    neighbourset += [(x+1, y-1)]
            if x - 1 >= 0:
                neighbourset += [(x-1, y)]
            # a light is not a neighbour with itself
            if x + 1 < maxx:
                neighbourset += [(x+1, y)]
            if y + 1 < maxy:
                if x - 1 >= 0:
                    neighbourset += [(x-1, y+1)]
                neighbourset += [(x, y+1)]
                if x + 1 < maxx:
                    neighbourset += [(x+1, y+1)]
            neighbours[(x,y)] = neighbourset

    lights = deepcopy(orig_lights)
    new_lights = deepcopy(lights)
    for i in range(steps):
        for y, row in enumerate(lights):
            for x, col in enumerate(row):
                num_alive = 0
                for (neighx, neighy) in neighbours[(x,y)]:
                    #print(f'--{(neighx, neighy)}')
                    if lights[neighy][neighx] == ON:
                        num_alive += 1
                if lights[y][x] == ON:
                    if num_alive not in [2, 3]:
                        new_lights[y][x] = OFF
                else:
                    if num_alive == 3:
                        new_lights[y][x] = ON
        lights = deepcopy(new_lights)
    display(lights)

    num_on = 0
    for y, row in enumerate(lights):
        num_on += len([x for x in row if x == ON])
    print(f'Number on: {num_on}')

    lights = deepcopy(orig_lights)
    lights[0][0] = ON
    lights[0][maxx-1] = ON
    lights[maxy-1][0] = ON
    lights[maxy-1][maxx-1] = ON
    new_lights = deepcopy(lights)
    for i in range(steps):
        for y, row in enumerate(lights):
            for x, col in enumerate(row):
                if (x,y) in [(0,0), (0,maxx-1), (maxy-1,0), (maxy-1,maxx-1)]:
                    continue
                num_alive = 0
                for (neighx, neighy) in neighbours[(x,y)]:
                    #print(f'--{(neighx, neighy)}')
                    if lights[neighy][neighx] == ON:
                        num_alive += 1
                if lights[y][x] == ON:
                    if num_alive not in [2, 3]:
                        new_lights[y][x] = OFF
                else:
                    if num_alive == 3:
                        new_lights[y][x] = ON
        lights = deepcopy(new_lights)
    display(lights)

    num_on = 0
    for y, row in enumerate(lights):
        num_on += len([x for x in row if x == ON])
    print(f'Number on: {num_on}')

    return 0


if __name__ == "__main__":
    sys.exit(main())

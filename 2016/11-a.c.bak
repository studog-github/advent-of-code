#include <stdio.h>
#include <errno.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>

#define LINE_SIZE  10240
#define LINE_SIZE_S  "10240"

// New strategy:
// - move generation done with lists of objs
// - have is_floor_valid() to check list state
// - remove each item & pair { remove_objs() }, check floor
// - add each item & pair { insert_objs() } to other floor, check floor
// - floor valid if:
// - nothing
// - only Gs
// - only Ms
// - mixed, all Ms must be paired
//   - have is_paired()
// - elevator can be treated as a floor

#define NUM_FLOORS  4

typedef struct _obj_t {
  int floor;
  char type;
  char goc;
  struct _obj_t *next;
  struct _obj_t *prev;
} obj_t;

typedef struct _building_t {
  int num_floors;
  int elevator;
  int num_objs;
  obj_t *objs;
} building_t;

static void init_building(building_t *b) {
  b->num_floors = NUM_FLOORS;
  b->elevator = 0;
  b->num_objs = 0;
  b->objs = NULL;
}

static int add_object(building_t *b, int floor, char type, char goc) {
  obj_t *tmp;
  obj_t *o;
  char tmp_str[3];
  char o_str[3];
  int ret;

  tmp = malloc(sizeof(obj_t));
  if (tmp == NULL)
    return 0;
  tmp->floor = floor;
  tmp->type = type;
  tmp->goc = goc;

  if (b->objs == NULL) {
    b->objs = tmp;
    tmp->next = NULL;
    tmp->prev = NULL;
    b->num_objs++;
    return 1;
  }

  tmp_str[0] = tmp->type;
  tmp_str[1] = tmp->goc;
  tmp_str[2] = '\0';
  o_str[2] = '\0';
  for (o = b->objs; o; o = o->next) {
    o_str[0] = o->type;
    o_str[1] = o->goc;
    // This works because list is sorted smallest to largest
    // Also depends on the fact that 'G'enerator comes before 'M'icrochip
    ret = strcmp(tmp_str, o_str);
    if (ret == 0) {
      // Shouldn't happen; overwrite existing value
      printf("Warning: '%s' already in list\n", tmp_str);
      o->floor = tmp->floor;
      free(tmp);
      break;
    } else if (ret < 0) {
      // Insert in front of o
      tmp->next = o;
      tmp->prev = o->prev;
      if (o->prev)
        o->prev->next = tmp;
      o->prev = tmp;
      if (b->objs == o)
        b->objs = tmp;
      b->num_objs++;
      break;
    } else if (o->next == NULL) {
      // End of list, insert after o
      tmp->next = o->next;
      tmp->prev = o;
      o->next = tmp;
      b->num_objs++;
      break;
    }
  }

  return 1;
}

static void display_building(building_t *b) {
  int i;
  obj_t *o;

  for (i = b->num_floors - 1; i >= 0; i--) {
    printf("F%d", i + 1);
    printf(" %c", (i == b->elevator ? 'E' : '.'));
    for (o = b->objs; o; o = o->next) {
      if (i == o->floor) {
        printf(" %c%c", o->type, o->goc);
      } else {
        printf(" . ");
      }
    }
    printf("\n");
  }
}

typedef struct _move_t {
  obj_t *o1;
  obj_t *o2;
  int dest_floor;
  struct _move_t *next;
  struct _move_t *prev;
} move_t;

static void insert_move(move_t **moves, obj_t *o1, obj_t *o2, int floor) {
  move_t *tmp;
  move_t *m;

  tmp = malloc(sizeof(move_t));
  if (!tmp) {
    printf("Error: Out of memory in %s\n", __FUNCTION__);
    return;
  }
  tmp->o1 = o1;
  tmp->o2 = o2;
  tmp->dest_floor = floor;

  if (!*moves) {
    *moves = tmp;
    tmp->next = NULL;
    tmp->prev = NULL;
    return;
  }

  for (m = *moves; m->next; m = m->next)
    ;
  m->next = tmp;
  tmp->next = NULL;
  tmp->prev = m;
}

// Always returns sorted lists because building's object list is sorted
static obj_t **find_objs_by_floor(building_t *b, int floor) {
  obj_t **olist;
  obj_t *o;
  int num_objs;

  olist = malloc((b->num_objs + 1) * sizeof(obj_t *));
  if (olist == NULL) {
    printf("Error: Out of memory in %s\n", __FUNCTION__);
    return NULL;
  }

  for (o = b->objs, num_objs = 0; o; o = o->next) {
    if (o->floor == floor) {
      olist[num_objs] = o;
      num_objs++;
    }
  }

  olist[num_objs] = NULL;

  return olist;
}

#if 1
static void dump_olist(obj_t **ol) {
  int i;

  printf("{");
  for (i = 0; ol[i]; i++) {
    printf(" %c%c", ol[i]->type, ol[i]->goc);
  }
  printf(" }\n");
}
#endif

static move_t *find_moves(building_t *b) {
  obj_t **olist;
  //obj_t *o;
  obj_t **olist2;
  //obj_t *dno;
  //int num_objs;
  int i;
  int j;

  move_t *moves;

  moves = NULL;

  olist = find_objs_by_floor(b, b->elevator);
printf("  : ");
dump_olist(olist);

  if (b->elevator < NUM_FLOORS - 1) {
    // moves that go up
    olist2 = find_objs_by_floor(b, b->elevator + 1);
printf("Up: ");
dump_olist(olist2);
    // single item moves
    for (i = 0; olist[i]; i++) {
printf("Considering %c%c... ", olist[i]->type, olist[i]->goc);
      if (olist[i + 1] && (olist[i + 1]->type == olist[i]->type)) {
printf("would break pair... ");
        // if G can't leave M if other G's present
        for (j = 0; olist[j]; j++) {
          if (olist[j]->goc == 'G')
            break;
        }
        if (olist[j]) {
printf("disallowed by %c%c\n", olist[j]->type, olist[j]->goc);
          continue;
        } else {
printf("OK\n");
        }
      }
      if (olist[i]->goc == 'G') {
printf("checking if would fry other microchips... ");
        for (j = 0; olist2[j]; j++) {
          // G can't stay if other non-paired M's present
          if (olist2[j]->goc == 'M' &&
              (olist2[j]->type != olist[i]->type) &&
              !(j > 0 && olist2[j - 1]->type == olist2[j]->type)) {
            break;
          }
        }
        if (olist2[j]) {
printf("disallowed by %c%c\n", olist2[j]->type, olist2[j]->goc);
          continue;
        } else {
printf("OK\n");
        }
      } else {
printf("checking if would get fried... ");
        for (j = 0; olist2[j]; j++) {
          // M can't stay if other G's present
          if ((olist2[j]->goc == 'G') && (olist2[j]->type != olist[i]->type))
            break;
        }
        if (olist2[j]) {
printf("disallowed by %c%c\n", olist2[j]->type, olist2[j]->goc);
          continue;
        } else {
printf("OK\n");
        }
      }
printf("MOVE\n");
      insert_move(&moves, olist[i], NULL, b->elevator + 1);
    }

    // double item moves
    for (i = 0; olist[i]; i++) {
     for (j = i + 1; olist[j]; j++) {
printf("Considering %c%c,%c%c... ", olist[i]->type, olist[i]->goc, olist[j]->type, olist[j]->goc);
       if ((olist[i]->goc != olist[j]->goc) && (olist[i]->type != olist[j]->type)) {
         // Mixed G+M must be same type to not fry M
printf("gen/chip not the same type\n");
         continue;
       }
     }
    }
  }

  if (b->elevator > 1) {
    // moves that go down
    olist2 = find_objs_by_floor(b, b->elevator - 1);
//printf("Dn: ");
//dump_olist(olist2);
  }

  return NULL;
}

static int find_solution(building_t *b, move_t **ml) {
  move_t *moves;

(void)ml;
  moves = find_moves(b);
  if (moves == NULL)
    return 0;

  // apply move
  // if victory return true
  // recurse
  return 1;
}




int main(int argc, char **argv)
{
  char *filename;
  FILE *fp;
  int ret;
  char line[LINE_SIZE + 1] = { 0 };
  int i;

  building_t building;

  int floor;
  char type;

  int num_steps;
  move_t *move_list;
  move_t *m;

  if (argc < 2)
    filename = "11-a-input";
  else
    filename = argv[1];

  fp = fopen(filename, "r");
  if (!fp) {
    printf("Error: Couldn't open '%s': %s (%d)\n", filename, strerror(errno), errno);
    return 1;
  }

  init_building(&building);

  while (1) {
    ret = fscanf(fp, "%" LINE_SIZE_S "[^\n]\n", line);
    if (ret == EOF)
      break;
    if (ret != 1) {
      printf("Error: Expected 1, scanned %d instead\n", ret);
      return 1;
    }

//printf(":%s:\n", line);
    i = 4;
    if (!strncmp(&line[i], "first", 5)) {
      floor = 0;
      i += 5;
    } else if (!strncmp(&line[i], "second", 6)) {
      floor = 1;
      i += 6;
    } else if (!strncmp(&line[i], "third", 5)) {
      floor = 2;
      i += 5;
    } else if (!strncmp(&line[i], "fourth", 6)) {
      floor = 3;
      i += 6;
    } else {
      printf("Error: Unknown floor '%s'\n", &line[i]);
      return 1;
    }

    if (!strcmp(&line[i], " floor contains nothing relevant.")) {
      continue;
    } else {
      i += 18;
    }

    while (1) {
//printf("T:%s:\n", &line[i]);
      type = toupper(line[i]);
      do { i++; } while (line[i] != ' '); i++;
//printf("K:%s:\n", &line[i]);
      if (!strncmp(&line[i], "generator", 9)) {
        i += 9;
        if (!add_object(&building, floor, type, 'G')) {
          printf("Error: Out of memory adding object %cG\n", type);
          return 1;
        }
      } else if (!strncmp(&line[i], "microchip", 9)) {
        i += 9;
        if (!add_object(&building, floor, type, 'M')) {
          printf("Error: Out of memory adding object %cG\n", type);
          return 1;
        }
      } else {
        printf("Error: Unknown goc '%s'\n", &line[i]);
        return 1;
      }
      do { i++; } while (line[i] != ' ' && line[i] != '\0');
//printf(" :%s:\n", &line[i]);
      if (line[i] == '\0')
        break;
      i++;
//printf("A:%s:\n", &line[i]);
      if (strncmp(&line[i], "and ", 4) == 0)
        i += 4;
      do { i++; } while (line[i] != ' ' && line[i] != '\0');
//printf(" :%s:\n", &line[i]);
      if (line[i] == '\0')
        break;
      i++;
    }
  }

  display_building(&building);

  ret = find_solution(&building, &move_list);
  if (!ret) {
    printf("No solution found\n");
    return 1;
  }

  for (m = move_list, num_steps = 0; m; m = m->next, num_steps++) {
    // print move
    // apply move
    display_building(&building);
  }

  printf("Number of steps: %d\n", num_steps);

  return 0;
}

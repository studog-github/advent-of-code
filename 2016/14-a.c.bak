#include <stdio.h>
#include <errno.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>
#include <stdbool.h>
#include <openssl/md5.h>
#include "list.h"

#define MD5_DIGEST_LENGTH_A  (MD5_DIGEST_LENGTH * 2)

#define LINE_SIZE  1024
#define LINE_SIZE_S  "1024"

static inline int ahdtoi(char ahd)
{
  if (ahd >= '0' && ahd <= '9')
    return ahd - '0';
  if (ahd >= 'a' && ahd <= 'f')
    return ahd - 'a';
  if (ahd >= 'A' && ahd <= 'F')
    return ahd - 'A';
  return -1;
}

static void md5toa(unsigned char *md5, char *buf)
{
  int i;
  char *p;

  for (i = 0, p = buf; i < MD5_DIGEST_LENGTH; i++)
    p += sprintf(p, "%02x", md5[i]);
}

#if 0
static void dump_md5(unsigned char *hash)
{
  int i;

  printf("md5:");
  for (i = 0; i < MD5_DIGEST_LENGTH; i++)
    printf(" %02x", hash[i]);
  printf("\n");
}
#endif

#if 0
static void dump_md5(unsigned char *hash)
{
  char str[MD5_DIGEST_LENGTH_A + 1];

  md5toa(hash, str);
  printf("md5: %s\n", str);
}
#endif

typedef struct _santa_key_t {
  int idx;
  char md5str[MD5_DIGEST_LENGTH_A + 1];
  int triple;
  struct list_head list;
} santa_key_t;

int main(int argc, char **argv)
{
  char *filename;
  FILE *fp;
  int ret;
  char line[LINE_SIZE + 1] = { 0 };

  struct list_head window;
  int num_in_window;
  struct list_head keys;
  int num_keys;
  int salt_len;

  char *p;
  int i;
  unsigned char *hash;
  santa_key_t *sk;
  int j;
  struct list_head *winptr;
  struct list_head *tmpptr;
  santa_key_t *wk;
  bool window_checked_for[16];
  int ahd;

  if (argc < 2)
    filename = "14-a-input";
  else
    filename = argv[1];

  fp = fopen(filename, "r");
  if (!fp) {
    printf("Error: Couldn't open '%s': %s (%d)\n", filename, strerror(errno), errno);
    return 1;
  }

  while (1) {
    ret = fscanf(fp, "%" LINE_SIZE_S "[^\n]\n", line);
    if (ret == EOF)
      break;
    if (ret != 1) {
      printf("Error: Expected 1, scanned %d instead\n", ret);
      return 1;
    }

//printf(":%s:\n", line);
//dump_md5(MD5((unsigned char *)line, strlen(line), NULL));
  }

  INIT_LIST_HEAD(&window);
  num_in_window = 0;
  INIT_LIST_HEAD(&keys);
  num_keys = 0;

  salt_len = strlen(line);
  p = line + salt_len;
  for (i = 0; num_keys < 64; i++) {
    ret = sprintf(p, "%d", i);
    hash = MD5((unsigned char *)line, salt_len + ret, NULL);
    if (num_in_window < 1000) {
      sk = malloc(sizeof(*sk));
      if (sk == NULL) {
        printf("Error: Out of memory (window)\n");
        return 1;
      }
    } else {
      sk = list_entry(window.next, santa_key_t, list);
      list_del(&sk->list);
      num_in_window--;
    }
    sk->idx = i;
    md5toa(hash, sk->md5str);
    sk->triple = -1;
    for (j = 0; j < MD5_DIGEST_LENGTH_A - 2; /**/) {
      if (sk->md5str[j] != sk->md5str[j + 1]) {
        j += 1;
      } else if (sk->md5str[j + 1] != sk->md5str[j + 2]) {
        j += 2;
      } else {
        sk->triple = j;
        break;
      }
    }
printf("[%s] [%s] [%d] [%d] [%d]\n", line, sk->md5str, sk->triple, num_in_window, num_keys);

    for (j = 0; j < 16; j++)
      window_checked_for[j] = false;

    for (j = 0; j < MD5_DIGEST_LENGTH_A - 4; /**/) {
      ahd = ahdtoi(sk->md5str[j]);
      if (window_checked_for[ahd] || (sk->md5str[j] != sk->md5str[j + 1])) {
        j += 1;
      } else if (sk->md5str[j + 1] != sk->md5str[j + 2]) {
        j += 2;
      } else if (sk->md5str[j + 2] != sk->md5str[j + 3]) {
        j += 3;
      } else if (sk->md5str[j + 3] != sk->md5str[j + 4]) {
        j += 4;
      } else {
printf("5REP %d:%c\n", j, sk->md5str[j]);
        // found a 5rep; check for keys in window
        list_for_each_safe(winptr, tmpptr, &window) {
          wk = list_entry(winptr, santa_key_t, list);
          if (wk->triple != -1 && (wk->md5str[wk->triple] == sk->md5str[j])) {
            // wk is a key, move it to key list
printf("KEY [%d] [%s] [%d]\n", wk->idx, wk->md5str, wk->triple);
            list_del(&wk->list);
            num_in_window--;
            list_add(&wk->list, &keys);
            num_keys++;
          }
        }
        window_checked_for[ahd] = true;
        j += 4;
      }
    }

    if (sk->triple != -1) {
      list_add(&sk->list, &window);
      num_in_window++;
    }
  }

  printf("Index; %d\n", i);

  return 0;
}

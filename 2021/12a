#!/usr/bin/python3

import sys
import os
import argparse
from libstu import *
from pprint import pprint
from copy import deepcopy
import itertools
import math

THIS = os.path.basename(sys.argv[0])
DEFAULT_INPUT = THIS + "-input"

def main():
    arg_parser = argparse.ArgumentParser(prog=THIS)
    arg_parser.add_argument("-f", "--file", default=DEFAULT_INPUT,
                            help="specify the input file (default: %(default)s)", metavar="file")
    args = arg_parser.parse_args()

    # Open input file

    input_path = os.path.abspath(args.file)
    if not os.path.exists(input_path):
        print("%s: Error: File '%s' not found" % (THIS, args.file))
        return 1

    input = open(input_path, "r")
    if input is None:
        print("%s: Error: Couldn't open file '%s'" % (THIS, input_path))
        return 1

    # Main loop
    lines = [line.strip().split('-') for line in input]

    caves = {}
    for line in lines:
        # Normalize the connection item for easier processing
        if line[0] == 'end' or line[1] == 'start':
            line = [line[1], line[0]]
        if line[0] not in caves:
            caves[line[0]] = [line[1]]
        else:
            caves[line[0]].append(line[1])
        if line[0] == 'start' or line[1] == 'end':
            continue
        if line[1] not in caves:
            caves[line[1]] = [line[0]]
        else:
            caves[line[1]].append(line[0])
    #print(caves)

    def find_paths(caves, paths, cur_path, repeat=None):
        for cave in caves[cur_path[-1]]:
            if cave == 'end':
                found_path = cur_path.copy()
                found_path.append(cave)
                paths.append(found_path)
            elif cave.islower() and cave in cur_path:
                if repeat != '':
                    continue
                repeat = cave
                cur_path.append(cave)
                find_paths(caves, paths, cur_path, repeat)
                cur_path.pop()
                repeat = ''
            else:
                cur_path.append(cave)
                find_paths(caves, paths, cur_path, repeat)
                cur_path.pop()

    paths=[]
    find_paths(caves, paths, ['start'])
    [print(','.join(path)) for path in paths]
    print(f'{len(paths)} path{"s" if len(paths) > 1 else ""}')

    paths=[]
    find_paths(caves, paths, ['start'], repeat='')
    [print(','.join(path)) for path in paths]
    print(f'{len(paths)} path{"s" if len(paths) > 1 else ""}')

    return 0


if __name__ == "__main__":
    sys.exit(main())

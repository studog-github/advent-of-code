#!/usr/bin/python3

import sys
import os
import argparse
from libstu import *
from pprint import pprint
from copy import deepcopy
import itertools
import math
from collections import deque

THIS = os.path.basename(sys.argv[0])
DEFAULT_INPUT = THIS + "-input"
DEFAULT_DAYS = 80

def main():
    arg_parser = argparse.ArgumentParser(prog=THIS)
    arg_parser.add_argument("-f", "--file", default=DEFAULT_INPUT,
                            help="specify the input file (default: %(default)s)", metavar="file")
    arg_parser.add_argument("-d", "--days", default=DEFAULT_DAYS,
                            help="how many days to simulate (default: %(default)s)")
    args = arg_parser.parse_args()

    # Open input file

    input_path = os.path.abspath(args.file)
    if not os.path.exists(input_path):
        print("%s: Error: File '%s' not found" % (THIS, args.file))
        return 1

    input = open(input_path, "r")
    if input is None:
        print("%s: Error: Couldn't open file '%s'" % (THIS, input_path))
        return 1

    days = int(args.days)

    # Main loop
    fishes = [int(t) for t in input.readline().strip().split(',')]

    timers = deque([0] * 9)
    for fish in fishes:
        timers[fish] += 1

    for d in range(days):
        breeders = timers.popleft()
        timers[6] += breeders
        timers.append(breeders)
    print(f'After {days} days there are {sum(timers)} fish')

    return 0


if __name__ == "__main__":
    sys.exit(main())

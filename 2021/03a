#!/usr/bin/python3

import sys
import os
import argparse
from libstu import *
from pprint import pprint
from copy import deepcopy
import itertools
import math

THIS = os.path.basename(sys.argv[0])
DEFAULT_INPUT = THIS + "-input"

def main():
    arg_parser = argparse.ArgumentParser(prog=THIS)
    arg_parser.add_argument("-f", "--file", default=DEFAULT_INPUT,
                            help="specify the input file (default: %(default)s)", metavar="file")
    args = arg_parser.parse_args()

    # Open input file

    input_path = os.path.abspath(args.file)
    if not os.path.exists(input_path):
        print("%s: Error: File '%s' not found" % (THIS, args.file))
        return 1

    input = open(input_path, "r")
    if input is None:
        print("%s: Error: Couldn't open file '%s'" % (THIS, input_path))
        return 1

    # Main loop
    bits = [list(map(int, list(line.strip()))) for line in input]

    gamma = 0
    for i, _ in enumerate(bits[0]):
        gamma = (gamma << 1) | round(sum([l[i] for l in bits]) / len(bits))
    epsilon = (~gamma) & (2**len(bits[0]) - 1)
    pprint(f'gamma {gamma} epsilon {epsilon} power {gamma * epsilon}')

    def bitcrit_sort(pos, kind, bitlist):
        zeros = [i for i in bitlist if i[pos] == 0]
        ones = [i for i in bitlist if i[pos] == 1]
        if kind == 1:
            if len(zeros) > len(ones):  
                return zeros
            else:
                return ones
        else:
            if len(ones) < len(zeros):  
                return ones
            else:
                return zeros

    i = 0
    O2 = bitcrit_sort(i, 1, bits)
    while len(O2) > 1:
        i += 1
        O2 = bitcrit_sort(i, 1, O2)
    O2 = int(''.join(map(str, O2[0])), 2)
    print(O2)

    i = 0
    CO2 = bitcrit_sort(i, 0, bits)
    while len(CO2) > 1:
        i += 1
        CO2 = bitcrit_sort(i, 0, CO2)
    CO2 = int(''.join(map(str, CO2[0])), 2)
    print(CO2)

    print(f'{O2 * CO2}')

    return 0


if __name__ == "__main__":
    sys.exit(main())

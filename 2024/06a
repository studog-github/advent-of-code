#!/usr/bin/env python

import sys
import os
import argparse
from libstu import *
from pprint import pprint
from copy import deepcopy
import itertools
import math
from collections import Counter

THIS = os.path.basename(sys.argv[0])
DEFAULT_INPUT = THIS + "-input"

def main():
    arg_parser = argparse.ArgumentParser(prog=THIS)
    arg_parser.add_argument('-f', '--file', default=DEFAULT_INPUT,
                            help='specify the input file (default: %(default)s)', metavar='file')
    args = arg_parser.parse_args()

    # Open input file

    input_path = os.path.abspath(args.file)
    if not os.path.exists(input_path):
        print(f"{THIS}: Error: File '{args.file}' not found")
        return 1

    try:
        input = open(input_path, 'r')
    except:
        print(f"{THIS}: Error: Couldn't open file '{input_path}'")
        return 1

    # Main loop

    #                  N       E      S      W
    compass_deltas = [ (-1,0), (0,1), (1,0), (0,-1) ]

    grid = []
    for y, line in enumerate(input):
        line = list(line.strip())
        #print(line)
        grid.append(line)
        if '^' in line:
            x = line.index('^')
            line[x] = '.'
            starty = y
            startx = x
            guardy = starty
            guardx = startx
            guardf = 0 # Facing direction 0/north in compass_deltas
            deltay, deltax = compass_deltas[guardf]
            #print(guard)
    #dump_map_join(grid)
    maxy = len(grid)
    maxx = len(grid[0])

    visited = deepcopy(grid)
    visited[guardy][guardx] = 'X'
    #print()
    #dump_map_join(visited)

    def step(p):
        y, x, f = p
        dy, dx = compass_deltas[f]
        turn_count = 0
        while True:
            ny = y + dy
            nx = x + dx
            if (not 0 <= ny < maxy) or (not 0 <= nx < maxx):
                # Guard exits the grid
                #print(f'-= step() guard exits the grid')
                return 'Exit'
            if grid[ny][nx] == '#':
                #if turn_count == 1:
                    # The guard has already turned once on this spot, A second turn sends them back where they
                    #   came from; maybe this does not count as a loop?
                    # Answer now too low, so double turn loopbacks are okay
                    #return 'Double turn'
                f = (f + 1) % len(compass_deltas)
                dy, dx = compass_deltas[f]
                #print(f'-= step() guard faces {guardf} {dy=} {dx=}')
                turn_count += 1
                continue
            return ny, nx, f

    def loop(y, x, f, loop_num_calls):
        print(f'loop({y=}, {x=}, {f=}, {loop_num_calls=})')

        target_call = 0
        if (loop_num_calls == target_call) or (target_call == -1):
            debug = True
            loopmap = deepcopy(grid)
        else:
            debug = False

        a = (y, x, f)
        b = (y, x, f)
        if debug:
            loopmap[a[0]][a[1]] = '*'
        while True:
            a = step(a)
            if a == 'Exit' or a == 'Double turn':
                if debug:
                    dump_map_join(loopmap)
                if a == 'Exit':
                    print(f'A1 exits the grid')
                else:
                    print(f'A1 double turns')
                return False
            if debug:
                print(f'A1 step {a=}')
                loopmap[a[0]][a[1]] = 'A'
                #dump_map_join(loopmap)
            a = step(a)
            if a == 'Exit' or a == 'Double turn':
                if debug:
                    dump_map_join(loopmap)
                if a == 'Exit':
                    print(f'A2 exits the grid')
                else:
                    print(f'A2 double turns')
                return False
            if debug:
                print(f'A2 step {a=}')
                loopmap[a[0]][a[1]] = 'A'
                #dump_map_join(loopmap)
            if a == b:
                if debug:
                    print()
                    dump_map_join(loopmap)
                print(f'{a} == {b} {a == b}')
                return True
            b = step(b)
            # No check required; b is only ever visiting where a has already gone therefore is only ever on the grid
            if debug:
                print(f'B1 step {b=}')
                loopmap[b[0]][b[1]] = 'B'
                #dump_map_join(loopmap)

    num_loop_calls = 0
    loop_causers = []
    print(f'START is {y=} {x=}')
    while True:
        nexty = guardy + deltay
        nextx = guardx + deltax
        if (not 0 <= nexty < maxy) or (not 0 <= nextx < maxx):
            # Guard exits the grid
            #print(f'-= guard exits the grid')
            break
        if grid[nexty][nextx] == '#':
            guardf = (guardf + 1) % len(compass_deltas)
            deltay, deltax = compass_deltas[guardf]
            #print(f'guard faces {guardf} {deltay=} {deltax=}')
            continue
        if (not (nexty == starty and nextx == startx)) and not visited[nexty][nextx] == 'X':
            # Add obstacle at (nexty, nextx) and check for loop/exit
            #print(f'ADDING AT {nexty=} {nextx=} START IS {starty=} {startx=}')
            #print()
            #dump_map_join(visited)
            #print()
            grid[nexty][nextx] = '#'
            num_loop_calls += 1
            if loop(guardy, guardx, guardf, num_loop_calls):
                if not (nexty, nextx) in loop_causers:
                    loop_causers.append((nexty, nextx))
            grid[nexty][nextx] = '.'
        guardy = nexty
        guardx = nextx
        visited[guardy][guardx] = 'X'
        #print(f'guard steps to {guardy=} {guardx=}')
    #dump_map_join(grid)
    #print()
    #dump_map_join(visited)
    distinct_visits = 0
    for row in visited:
        distinct_visits += row.count('X')
    print(f'Part A: Guard visited {distinct_visits} positions')
    print(f'Part B: There are {len(loop_causers)} looping spots')
    #pprint(loop_causers)
    #lc_sorted = sorted(loop_causers)
    #print()
    #pprint(sorted(loop_causers))
    #print(f'{len(lc_sorted)}')
    #print(f'{len(set(lc_sorted))}')

    return 0


if __name__ == "__main__":
    sys.exit(main())

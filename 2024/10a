#!/usr/bin/env python

import sys
import os
import argparse
from libstu import *
from pprint import pprint
from copy import deepcopy
import itertools
import math
from collections import Counter

THIS = os.path.basename(sys.argv[0])
DEFAULT_INPUT = THIS + "-input"

def main():
    arg_parser = argparse.ArgumentParser(prog=THIS)
    arg_parser.add_argument('-f', '--file', default=DEFAULT_INPUT,
                            help='specify the input file (default: %(default)s)', metavar='file')
    args = arg_parser.parse_args()

    # Open input file

    input_path = os.path.abspath(args.file)
    if not os.path.exists(input_path):
        print(f"{THIS}: Error: File '{args.file}' not found")
        return 1

    try:
        input = open(input_path, 'r')
    except:
        print(f"{THIS}: Error: Couldn't open file '{input_path}'")
        return 1

    # Main loop

    #                  N       E      S      W
    compass_deltas = [ (-1,0), (0,1), (1,0), (0,-1) ]

    grid = []
    trail_heads = {}
    for y, line in enumerate(input):
        line = [int(e) if e.isdigit() else math.inf for e in list(line.strip())]
        grid.append(line)
        temp_heads = [(y, x) for x, e in enumerate(line) if e == 0]
        for head in temp_heads:
            # = [ (unique ends), [incomplete trails], [complete trails] ]
            trail_heads[head] = [ set(), [], [] ]
    #dump_map(grid)
    #print(f'{trail_heads=}')

    maxy = len(grid)
    maxx = len(grid[0])

    def dump_trail_head(th):
        print(f'----------------------------------------------------------------------------------------------------')
        if trail_heads[th][0]:
            print(f'{th}: Ends ({len(trail_heads[th][0])}): {trail_heads[th][0]}')
        else:
            print(f'{th}: Ends (0):')
        print(f'{th}: Partial trails:')
        for pt in trail_heads[th][1]:
            print(f'  {pt}')
        print(f'{th}: Complete trails ({len(trail_heads[th][2])}):')
        for ct in trail_heads[th][2]:
            print(f'  {ct}')
        print(f'----------------------------------------------------------------------------------------------------')

    for trail_head in trail_heads:
        trail_heads[trail_head][1].append([trail_head])
        #print(f'Starting at {trail_head}: {trail_heads[trail_head]}')
        while trail_heads[trail_head][1]:
            cur_trail = trail_heads[trail_head][1].pop(0)
            cur_pos = cur_trail[-1]
            cury, curx = cur_pos
            #print(f'  Current trail {cur_trail}, current position {cur_pos}')
            for neighb in neighbours_b(*cur_pos, miny=0, minx=0, maxy=maxy, maxx=maxx, orthogonal=True):
                neighby, neighbx = neighb
                #print(f'    Checking neighb {neighb}: {grid[neighby][neighbx]}', end='')
                if grid[neighby][neighbx] - grid[cury][curx] != 1:
                    #print()
                    continue
                new_ptrail = cur_trail.copy()
                new_ptrail.append(neighb)
                if grid[neighby][neighbx] == 9:
                    trail_heads[trail_head][2].append(new_ptrail)
                    trail_heads[trail_head][0].add(neighb)
                    #print(f' Completing trail {cur_trail}')
                else:
                    trail_heads[trail_head][1].append(new_ptrail)
                    #print(f' Adding partial trail {new_ptrail}')
            #dump_trail_head(trail_head)
    #print()
    #print()
    sum_scores = 0
    sum_ratings = 0
    for trail_head in trail_heads:
        #dump_trail_head(trail_head)
        sum_scores += len(trail_heads[trail_head][0])
        sum_ratings += len(trail_heads[trail_head][2])
    print(f'Part A: Sum of scores is {sum_scores}')
    print(f'Part B: Sum of ratings is {sum_ratings}')

    return 0


if __name__ == "__main__":
    sys.exit(main())

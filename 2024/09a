#!/usr/bin/env python

import sys
import os
import argparse
from libstu import *
from pprint import pprint
from copy import deepcopy
import itertools
import math
from collections import Counter

THIS = os.path.basename(sys.argv[0])
DEFAULT_INPUT = THIS + "-input"

def main():
    arg_parser = argparse.ArgumentParser(prog=THIS)
    arg_parser.add_argument('-f', '--file', default=DEFAULT_INPUT,
                            help='specify the input file (default: %(default)s)', metavar='file')
    args = arg_parser.parse_args()

    # Open input file

    input_path = os.path.abspath(args.file)
    if not os.path.exists(input_path):
        print(f"{THIS}: Error: File '{args.file}' not found")
        return 1

    try:
        input = open(input_path, 'r')
    except:
        print(f"{THIS}: Error: Couldn't open file '{input_path}'")
        return 1

    # Main loop

    for line in input:
        line = [int(e) for e in line.strip()]

    # All inputs are an odd length, exploit this?
    #print(f'{line=}')
    #print(f'{len(line)=}')
    #print(f'{sum(line)=}')
    #print(f'{sum([e for i, e in enumerate(line) if i % 2 == 0])=}')

    def tail_fid_generator(line):
        t_idx = len(line) - 1
        t_fid = t_idx // 2
        while t_idx >= 0:
            #print(f'\ntail_fid_generator() LOOP {t_idx=} {t_fid=}', flush=True)
            for i in range(line[t_idx]):
                #print(f'tail_fid_generator() yield {t_fid=}', flush=True)
                yield t_fid
            # Subtracting 2 skips over the free space entries
            t_idx -= 2
            t_fid -= 1

    def defrag(line):
        h_idx = 0
        h_fid = 0
        defragged_size = sum([e for i, e in enumerate(line) if i % 2 == 0])

        tail_fid_gen = tail_fid_generator(line)

        df_idx = 0
        while df_idx < defragged_size:
            #print(f'\ndefrag() {h_idx=} {h_fid=} {df_idx=} {defragged_size=}', flush=True)
            if h_idx % 2 == 0:
                # In a file
                for i in range(df_idx, min(df_idx + line[h_idx], defragged_size)):
                    fid = h_fid
                    #print(f'defrag() FILE yield {i=}, {fid=}', flush=True)
                    yield i, fid
                df_idx += line[h_idx]
                h_idx += 1
                h_fid += 1
            else:
                # In free space
                for i in range(df_idx, min(df_idx + line[h_idx], defragged_size)):
                    fid = next(tail_fid_gen)
                    #print(f'defrag() .... yield {i=}, {fid=}', flush=True)
                    yield i, fid
                df_idx += line[h_idx]
                h_idx += 1

    #defrag_list = [e for e in defrag(line)]
    #print(f'{defrag_list=}')
    #idxs = [e[0] for e in defrag_list]
    #fids = [e[1] for e in defrag_list]
    #print(f'idxs=[ {idxs[0]:2d}', end='')
    #for i in idxs[1:]:
        #print(f', {i:2d}', end='')
    #print(' ]')
    #print(f'fids=[ {fids[0]:2d}', end='')
    #for i in fids[1:]:
        #print(f', {i:2d}', end='')
    #print(' ]')
    #fs_cksum = sum([a * b for a, b in defrag_list])
    fs_cksum = sum([a * b for a, b in defrag(line)])
    print(f'Part A: File system checksum is {fs_cksum} {fs_cksum:_}')

    def defrag_2(line):
        # Build defragged disk; it's a list of (fid|free, len, defrag_start_index) tuples
        FREE_SPACE = -1
        df_line = []
        fid = 0
        df_idx = 0
        for i in range(len(line)):
            if i % 2 == 0:
                df_line.append((fid, line[i], df_idx))
                fid += 1
            else:
                df_line.append((FREE_SPACE, line[i], df_idx))
            df_idx += line[i]
        #print(f'{line=}')
        #print(f'{df_line=}')

        # Don't iterate and mutate at the same time; make a copy to mutate
        mut_df_line = deepcopy(df_line)
        # Attempt to move each file _exactly once_
        for i in range(len(df_line) - 1, -1, -1):
            fid, size, df_start_idx = df_line[i]
            #print(f'Checking {i=} {df_line[i]=}... ', end='')
            if fid == FREE_SPACE:
                #print(f'skipping FREE SPACE block')
                continue
            #print()
            df_virt_idx = 0
            for j in range(len(mut_df_line)):
                # Need to stop once the free space is to the right of the file potentially moving
                if df_virt_idx > df_start_idx:
                    #print(f'  FILE WOULD MOVE RIGHT {df_virt_idx=} {df_start_idx=}')
                    break
                mut_fid, mut_size, _ = mut_df_line[j]
                df_virt_idx += mut_size
                #print(f'  Finding {j=} {mut_df_line[j]}... ', end='')
                if mut_fid != FREE_SPACE or mut_size < size:
                    #print(f'skipping, FREE SPACE? {mut_fid == FREE_SPACE=} Too small? {mut_size=} {size=} {mut_size < size=}')
                    continue
                #print()
                # Found a free space block big enough to hold the file
                file = (fid, size, df_start_idx)
                free_block = (FREE_SPACE, size, df_start_idx)
                #print(f'    Setting up {file=} {free_block=}')
                # Find the index of the file then remove it
                k = mut_df_line.index(file)
                mut_df_line.pop(k)
                #print(f'    Popped {k=} | {mut_df_line=}')
                # Insert newly created free space
                mut_df_line.insert(k, free_block)
                # Insert file into free block
                mut_df_line.insert(j, file)
                #print(f'    Inserted {file=} at {j=} | {mut_df_line=}')
                # Shrink free space by size of file
                mut_df_line.pop(j + 1)
                #print(f'    Popped {j + 1=} | {mut_df_line=}')
                mut_df_line.insert(j + 1, (mut_fid, mut_size - size, _))
                #print(f'    Inserted {(fid, size, _)=} at {j=} | {mut_df_line=}')
                break
        #print(f'{mut_df_line=}')

        df_idx = 0
        for fid, size, _ in mut_df_line:
            if fid == FREE_SPACE:
                fid = 0
            for i in range(df_idx, df_idx + size):
                yield i, fid
            df_idx += size

    #print()
    #defrag_list = [e for e in defrag_2(line)]
    #print()
    #print(f'{defrag_list=}')
    #idxs = [e[0] for e in defrag_list]
    #fids = [e[1] for e in defrag_list]
    #print(f'idxs=[ {idxs[0]:2d}', end='')
    #for i in idxs[1:]:
        #print(f', {i:2d}', end='')
    #print(' ]')
    #print(f'fids=[ {fids[0]:2d}', end='')
    #for i in fids[1:]:
        #print(f', {i:2d}', end='')
    #print(' ]')
    #fs_cksum = sum([a * b for a, b in defrag_list])
    fs_cksum = sum([a * b for a, b in defrag_2(line)])
    print(f'Part B: File system checksum is {fs_cksum} {fs_cksum:_}')

    return 0


if __name__ == "__main__":
    sys.exit(main())

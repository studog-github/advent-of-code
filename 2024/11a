#!/usr/bin/env python

import sys
import os
import argparse
from libstu import *
from pprint import pprint
from copy import deepcopy
import itertools
import math
from collections import Counter

THIS = os.path.basename(sys.argv[0])
DEFAULT_INPUT = THIS + "-input"
DEFAULT_BLINKS = 1

def main():
    arg_parser = argparse.ArgumentParser(prog=THIS)
    arg_parser.add_argument('-f', '--file', default=DEFAULT_INPUT,
                            help='specify the input file (default: %(default)s)', metavar='file')
    arg_parser.add_argument('-b', '--blinks', type=int, default=DEFAULT_BLINKS,
                            help='number of times to blink (default: %(default)d)', metavar='blinks')
    args = arg_parser.parse_args()

    # Open input file

    input_path = os.path.abspath(args.file)
    if not os.path.exists(input_path):
        print(f"{THIS}: Error: File '{args.file}' not found")
        return 1

    try:
        input = open(input_path, 'r')
    except:
        print(f"{THIS}: Error: Couldn't open file '{input_path}'")
        return 1

    blinks = args.blinks

    # Main loop
    for line in input:
        line = line.strip()
        # The str(int()) protects against leading zeros in the input
        stones = [str(int(e)) for e in line.split()]
        #print(f'{stones}')

    @functools.cache
    def blink_stones(stone, blinks, indent=''):
        if blinks == 0:
            return 1

        #print(f'{indent}-= blink_stones({stone}, {blinks})')
        new_blinks = blinks - 1
        new_indent = indent + '  '

        if stone == '0':
            return blink_stones('1', new_blinks, new_indent)
        elif len(stone) % 2 == 0:
            #print(f'{stone} ({len(stone)}): {stone[:len(stone)//2]} {stone[len(stone)//2:]}')
            new_left_stone = str(int(stone[:len(stone)//2]))
            new_right_stone = str(int(stone[len(stone)//2:]))
            return (blink_stones(new_left_stone, new_blinks, new_indent) +
                       blink_stones(new_right_stone, new_blinks, new_indent))
        else:
            new_stone = str(int(stone) * 2024)
            return blink_stones(new_stone, new_blinks, new_indent)

    num_stones = 0
    for stone in stones:
        num_stones += blink_stones(stone, blinks)
    print(f'Part A: Number of stones is {num_stones}')

#    for b in range(blinks):
#        new_stones = []
#        for stone in stones:
#            if stone == '0':
#                new_stones.append('1')
#            elif len(stone) % 2 == 0:
#                #print(f'{stone} ({len(stone)}): {stone[:len(stone)//2]} {stone[len(stone)//2:]}')
#                new_left_stone = str(int(stone[:len(stone)//2]))
#                new_right_stone = str(int(stone[len(stone)//2:]))
#                new_stones.append(new_left_stone)
#                new_stones.append(new_right_stone)
#            else:
#                new_stone = str(int(stone) * 2024)
#                new_stones.append(new_stone)
#        #print(f'{new_stones}')
#        stones = new_stones
#    print(f'Part A: Number of stones is {len(stones)}')

    return 0


if __name__ == "__main__":
    sys.exit(main())

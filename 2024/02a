#!/usr/bin/env python

import sys
import os
import argparse
from libstu import *
from pprint import pprint
from copy import deepcopy
import itertools
import math
from collections import Counter

THIS = os.path.basename(sys.argv[0])
DEFAULT_INPUT = THIS + "-input"

def main():
    arg_parser = argparse.ArgumentParser(prog=THIS)
    arg_parser.add_argument('-f', '--file', default=DEFAULT_INPUT,
                            help='specify the input file (default: %(default)s)', metavar='file')
    args = arg_parser.parse_args()

    # Open input file

    input_path = os.path.abspath(args.file)
    if not os.path.exists(input_path):
        print(f"{THIS}: Error: File '{args.file}' not found")
        return 1

    try:
        input = open(input_path, 'r')
    except:
        print(f"{THIS}: Error: Couldn't open file '{input_path}'")
        return 1

    def is_safe(report):
        diffs = [a - b for a, b in itertools.pairwise(report)]
        diff_max = max(diffs)
        diff_min = min(diffs)
        if (diff_min >= 1 and diff_max <= 3) or (diff_min >= -3 and diff_max <= -1):
            return True
        return False

    def is_damp_safe(report):
        for i, e in enumerate(report):
            new_report = report.copy()
            new_report.pop(i)
            if is_safe(new_report):
                return True
        return False

    # Main loop
    total_safe = 0
    total_damp = 0
    for line in input:
        report = [int(e) for e in line.split()]
        if is_safe(report):
            total_safe += 1
        elif is_damp_safe(report):
            total_damp += 1
        #print(f'{report}: {total_safe} {total_damp}')
    print(f'Part A: Total safe reports: {total_safe}')
    print(f'Part B: Total safe reports: {total_safe + total_damp}')

    return 0


if __name__ == "__main__":
    sys.exit(main())

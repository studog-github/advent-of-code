#!/usr/bin/python3

import sys
import os
import argparse
from libstu import *
from pprint import pprint
from copy import deepcopy
import itertools
import math

THIS = os.path.basename(sys.argv[0])
DEFAULT_INPUT = THIS + "-input"

def main():
    arg_parser = argparse.ArgumentParser(prog=THIS)
    arg_parser.add_argument("-f", "--file", default=DEFAULT_INPUT,
                            help="specify the input file (default: %(default)s)", metavar="file")
    args = arg_parser.parse_args()

    # Open input file

    input_path = os.path.abspath(args.file)
    if not os.path.exists(input_path):
        print("%s: Error: File '%s' not found" % (THIS, args.file))
        return 1

    input = open(input_path, "r")
    if input is None:
        print("%s: Error: Couldn't open file '%s'" % (THIS, input_path))
        return 1

    # Main loop

    boards = []
    board_ts = []
    board = []
    for line in input:
        line = line.strip()
        if line == '':
            boards.append(board)
            board_ts.append([''.join(b) for b in zip(*board)])
            board = []
            continue
        board.append(line)
    boards.append(board)
    board_ts.append([''.join(b) for b in zip(*board)])

    def find_reflection(board, smudge_row=None):
        # Look for top-edge match
        for i in range(len(board) - 1, 0, -1):
            if board[0] == board[i]:
                # Check for perfectness
                head = 1
                tail = i - 1
                while head < tail:
                    if board[head] != board[tail]:
                        break
                    head += 1
                    tail -= 1
                else:
                    if head > tail and (not smudge_row or (0 <= smudge_row <= i)):
                        #print(f'-= top-edge match at {head}')
                        return head
        # Look for the bottom-edge match
        for i in range(0, len(board) - 1):
            if board[i] == board[-1]:
                # Check for perfectness
                head = i + 1
                tail = len(board) - 2
                while head < tail:
                    if board[head] != board[tail]:
                        break
                    head += 1
                    tail -= 1
                else:
                    if head > tail and (not smudge_row or (i <= smudge_row < len(board))):
                        #print(f'-= bottom-edge match at {head}')
                        return head
        return None

    def find_smudge(board):
        for i in range(len(board) - 1):
            #print(f'{i:2}    {board[i]}')
            for j in range(i + 1, len(board), 2):
                #print(f'   {j:2} {board[j]}')
                diff_loc = None
                for k in range(len(board[i])):
                    if board[i][k] != board[j][k]:
                        if diff_loc is None:
                            diff_loc = k
                        else:
                            break
                else:
                    if diff_loc is not None:
                        # change the smudge, find reflection
                        new_board = deepcopy(board)
                        toggle_chr = '#' if board[i][diff_loc] == '.' else '.'
                        new_board[i] = board[i][0:diff_loc] + toggle_chr + board[i][diff_loc+1:]
                        #print(f'===================================================')
                        #print(f'{i}, {diff_loc} - {toggle_chr}')
                        #dump_map(board)
                        #print(f'===================================================')
                        #dump_map(new_board)
                        #print(f'===================================================')
                        rows = find_reflection(board)
                        new_rows = find_reflection(new_board, smudge_row=i)
                        #print(f'FOUND {rows} {new_rows}')
                        if new_rows and new_rows != rows:
                            return new_rows
        return None

    row_total = 0
    col_total = 0
    for i, board in enumerate(boards):
        #dump_map(board)
        #print()
        #dump_map(board_ts[i])
        #print(f'\n\n')

        #print(f'\nBoard {i}:')
        #dump_map(board)
        rows = find_reflection(board)
        if rows:
            row_total += rows
            #print(f'{i}: Found hor at {rows}; {row_total}, {col_total}')
            continue

        #print(f'\nTranposed:')
        #dump_map(board_ts[i])
        cols = find_reflection(board_ts[i])
        if cols:
            col_total += cols
            #print(f'{i}: Found ver at {cols}; {row_total}, {col_total}')
            continue

        print(f'NO REFLECTIONS FOUND!? (Board {i})') 
        return -1
    print(f'Part One: {col_total + row_total * 100}')

    row_total = 0
    col_total = 0
    for i, board in enumerate(boards):
        #print(f'\nBoard {i}:')
        #dump_map(board)
        rows = find_smudge(board)
        if rows:
            row_total += rows
            #print(f'{i}: Found hor at {rows}; {row_total}, {col_total}')
            continue

        #print(f'\nTranposed:')
        #dump_map(board_ts[i])
        cols = find_smudge(board_ts[i])
        if cols:
            col_total += cols
            #print(f'{i}: Found ver at {cols}; {row_total}, {col_total}')
            continue

        print(f'NO SMUDGES FOUND!? (Board {i})') 
        return -1
    print(f'Part Two: {col_total + row_total * 100}')

    return 0


if __name__ == "__main__":
    sys.exit(main())

#!/usr/bin/python3

import sys
import os
import argparse
from libstu import *
from pprint import pprint
from copy import deepcopy
import itertools
import math
from collections import Counter

THIS = os.path.basename(sys.argv[0])
DEFAULT_INPUT = THIS + "-input"

CARD_FACE_VALUES = { 'T': 10, 'J': 11, 'Q': 12, 'K': 13, 'A': 14 }
JOKER_FACE_VALUES = { 'T': 10, 'J': 1, 'Q': 12, 'K': 13, 'A': 14 }

def card_value(c, values):
    if c.isdigit():
        return int(c)
    return values[c]

# Base 20 chosen because it's a round number bigger than the highest card value of 14
def base_value(hand, values):
    value = 0
    for i, card in enumerate(reversed(hand)):
        value += 20**i * card_value(card, values)
    return value

def calc_offset(hand, joker=False):
    counts = Counter(hand)
    if not joker or 'J' not in counts:
        commons = counts.most_common()
        first = commons[0][1]
        if len(commons) > 1:
            second = commons[1][1]
    else:
        joker_count = counts['J']
        del counts['J']
        commons = counts.most_common()
        if len(commons) <= 1:
            first = len(hand)
        else:
            first = commons[0][1] + joker_count
            second = commons[1][1]
    if first == 1:
        offset = 0 # High card
    elif first == 2:
        if second == 1:
            offset = 1 # One pair
        else:
            offset = 2 # Two pair
    elif first == 3:
        if second == 1:
            offset = 3 # 3 of a kind
        else:
            offset = 4 # Full house
    elif first == 4:
        offset = 5 # 4 of a kind
    elif first == 5:
        offset = 6 # 5 of a kind
    else:
        raise ValueError('Hand size wrong?')
    return offset

def hand_value(hand):
    value = base_value(hand, CARD_FACE_VALUES)
    offset = calc_offset(hand)
    value *= 20**offset
    return value

def jhand_value(hand):
    value = base_value(hand, JOKER_FACE_VALUES)
    offset = calc_offset(hand, joker=True)
    value *= 20**offset
    return value

def main():
    arg_parser = argparse.ArgumentParser(prog=THIS)
    arg_parser.add_argument("-f", "--file", default=DEFAULT_INPUT,
                            help="specify the input file (default: %(default)s)", metavar="file")
    args = arg_parser.parse_args()

    # Open input file

    input_path = os.path.abspath(args.file)
    if not os.path.exists(input_path):
        print("%s: Error: File '%s' not found" % (THIS, args.file))
        return 1

    input = open(input_path, "r")
    if input is None:
        print("%s: Error: Couldn't open file '%s'" % (THIS, input_path))
        return 1

    # Main loop

    hands = []
    for line in input:
        hand, bid = line.split()
        hands.append([hand, int(bid)])
    #print(hands)
    hands.sort(key=lambda x: hand_value(x[0]))
    winnings = 0
    for i, (_, bid) in enumerate(hands, start=1):
        #print(i, _, bid)
        winnings += i * bid
    print(f'Part One: {winnings}')

    hands.sort(key=lambda x: jhand_value(x[0]))
    winnings = 0
    for i, (_, bid) in enumerate(hands, start=1):
        #print(i, _, bid)
        winnings += i * bid
    print(f'Part Two: {winnings}')

    return 0


if __name__ == "__main__":
    sys.exit(main())

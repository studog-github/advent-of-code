#!/usr/bin/python3

import sys
import os
import argparse
from libstu import *
from pprint import pprint
from copy import deepcopy
import itertools
import math

THIS = os.path.basename(sys.argv[0])
DEFAULT_INPUT = THIS + "-input"

def replace_all_once(string, rules, target=None):
    new_strings = set()
    for rule in rules:
        pos = 0
        while True:
            pos = string.find(rule, pos)
            if pos == -1:
                break
            for result in rules[rule]:
                new_string = string[:pos] + result + string[pos + len(rule):]
                if target and new_string == target:
                    return set([new_string])
                new_strings.add(new_string)
            pos += len(rule)
    return new_strings

def main():
    arg_parser = argparse.ArgumentParser(prog=THIS)
    arg_parser.add_argument("-f", "--file", default=DEFAULT_INPUT,
                            help="specify the input file (default: %(default)s)", metavar="file")
    args = arg_parser.parse_args()

    # Open input file

    input_path = os.path.abspath(args.file)
    if not os.path.exists(input_path):
        print("%s: Error: File '%s' not found" % (THIS, args.file))
        return 1

    input = open(input_path, "r")
    if input is None:
        print("%s: Error: Couldn't open file '%s'" % (THIS, input_path))
        return 1

    # Main loop

    productions = {}
    shortest_key = math.inf
    longest_key = -math.inf
    for line in input:
        line = line.strip()
        if line == '':
            break
        (molecule, _, result) = line.split(' ')
        if molecule not in productions:
            productions[molecule] = [result]
        else:
            productions[molecule] += [result]
        shortest_key = min(shortest_key, len(molecule))
        longest_key = max(longest_key, len(molecule))
    #print(productions)
    #print(f'{shortest_key}, {longest_key}')

    medicine = input.readline().strip()
    #print(medicine)

    new_molecules = replace_all_once(medicine, productions)
    print(f'New distinct molecules is {len(new_molecules)}')

    potentials = ['e']
    steps = 0
    while True:
        new_potentials = []
        steps += 1
        #print(f'-+ {steps}')
        print(f'-+ {potentials}')
        for potential in potentials:
            #print(f'-- {potential}')
            new_potentials += replace_all_once(potential, productions, target=medicine)
            #print(f'-= {new_potentials}')
            if new_potentials[-1] == medicine:
                print(f'Number of steps is {steps}')
                return 0
        # Dedup
        potentials = list(set(new_potentials))

    return 0


if __name__ == "__main__":
    sys.exit(main())

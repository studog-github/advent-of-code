#!/usr/bin/python3

import sys
import os
import argparse
from libstu import *

THIS = os.path.basename(sys.argv[0])
DEFAULT_INPUT = THIS + "-input"

def main():
    arg_parser = argparse.ArgumentParser(prog=THIS)
    arg_parser.add_argument("-f", "--file", default=DEFAULT_INPUT,
                            help="specify the input file (default: %(default)s)", metavar="file")
    args = arg_parser.parse_args()

    # Open input file

    input_path = os.path.abspath(args.file)
    if not os.path.exists(input_path):
        print("%s: Error: File '%s' not found" % (THIS, args.file))
        return 1

    input = open(input_path, "r")
    if input is None:
        print("%s: Error: Couldn't open file '%s'" % (THIS, input_path))
        return 1

    # Main loop

    NORTH = 'N'
    EAST = 'E'
    SOUTH = 'S'
    WEST = 'W'
    COMPASS = [ NORTH, EAST, SOUTH, WEST ]

    FORWARD = 'F'

    LEFT = 'L'
    RIGHT = 'R'

    X = 0
    Y = 1

    ship_face = EAST
    ship_pos = [0, 0]

    lines = [[line[0], int(line[1:])] for line in input]

    for line in lines:
        op = line[0]
        val = line[1]

        if op == FORWARD:
            op = ship_face

        if op == NORTH:
            ship_pos[X] += val
        elif op == EAST:
            ship_pos[Y] += val
        elif op == SOUTH:
            ship_pos[X] -= val
        elif op == WEST:
            ship_pos[Y] -= val
        elif op == LEFT:
            val = val // 90
            idx = COMPASS.index(ship_face)
            idx = (idx - val) % len(COMPASS)
            ship_face = COMPASS[idx]
        elif op == RIGHT:
            val = val // 90
            idx = COMPASS.index(ship_face)
            idx = (idx + val) % len(COMPASS)
            ship_face = COMPASS[idx]
        #print(f'{ship_face}: {ship_pos}')
    print(f'A: End pos {ship_pos}, manhattan dist {sum([abs(i) for i in ship_pos])}')

    ship_pos = [0, 0]
    waypoint = [10, 1]

    for line in lines:
        op = line[0]
        val = line[1]

        if op == NORTH:
            waypoint[Y] += val
        elif op == EAST:
            waypoint[X] += val
        elif op == SOUTH:
            waypoint[Y] -= val
        elif op == WEST:
            waypoint[X] -= val
        elif op == FORWARD:
            deltax = (waypoint[X] - ship_pos[X]) * val
            deltay = (waypoint[Y] - ship_pos[Y]) * val
            ship_pos[X] += deltax
            ship_pos[Y] += deltay
            waypoint[X] += deltax
            waypoint[Y] += deltay
        elif op == LEFT:
            waypoint = rotate_coords(waypoint, val, ship_pos)
        elif op == RIGHT:
            waypoint = rotate_coords(waypoint, -val, ship_pos)
        elif op == RIGHT:
            pass
        #print(f'{ship_face}: {ship_pos}')
    print(f'B: End pos {ship_pos}, manhattan dist {sum([abs(i) for i in ship_pos])}')

    return 0


if __name__ == "__main__":
    sys.exit(main())
